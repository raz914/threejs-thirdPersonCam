import * as THREE from "three";
import { PointerLockControls } from "three/examples/jsm/controls/PointerLockControls.js";
import Stats from "three/examples/jsm/libs/stats.module.js";

class ThreeJsApp {
  constructor() {
    this.scene = new THREE.Scene();
    this.mixer = null;
    this.clock = new THREE.Clock();

    this.init();
    this.animate();
  }

  init() {
    this.createCamera();
    this.createRenderer();
    this.createLights();
    this.createObjects();
    this.createControls();
    this.createStats();
    this.addEventListeners();
  }

  createCamera() {
    this.camera = new THREE.PerspectiveCamera(
      75,
      window.innerWidth / window.innerHeight,
      0.1,
      1000
    );
    this.camera.position.set(0, 0.5, 3);
  }

  createRenderer() {
    this.renderer = new THREE.WebGLRenderer();
    this.renderer.setSize(window.innerWidth, window.innerHeight);
    document.body.appendChild(this.renderer.domElement);
  }

  createLights() {
    this.scene.add(new THREE.GridHelper());

    const ambientLight = new THREE.AmbientLight(0xffffff, 1);
    ambientLight.position.set(5, 20, 10);
    this.scene.add(ambientLight);

    const light = new THREE.PointLight(0xffffff, 300);
    light.position.set(1, 5, 5);
    this.scene.add(light);
  }

  createObjects() {
    const geometry = new THREE.CapsuleGeometry();
    const material = new THREE.MeshBasicMaterial({
      color: 0x00ff00,
      wireframe: true
    });
    this.capsule = new THREE.Mesh(geometry, material);
    this.capsule.position.y = 1.5;
    this.scene.add(this.capsule);
  }

  createControls() {
    // Implement controls here
  }

  createStats() {
    this.stats = new Stats();
    document.body.appendChild(this.stats.dom);
  }

  addEventListeners() {
    window.addEventListener("resize", this.onWindowResize.bind(this), false);
    // Implement other event listeners here
  }

  onWindowResize() {
    this.camera.aspect = window.innerWidth / window.innerHeight;
    this.camera.updateProjectionMatrix();
    this.renderer.setSize(window.innerWidth, window.innerHeight);
  }

  animate() {
    requestAnimationFrame(this.animate.bind(this));

    if (this.mixer) {
      this.mixer.update(this.clock.getDelta());
    }

    // Implement animation logic here

    this.render();
    this.stats.update();
  }

  render() {
    this.renderer.render(this.scene, this.camera);
  }
}

const app = new ThreeJsApp();